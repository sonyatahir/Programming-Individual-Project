install.packages("R6")
library(dplyr)
library(RMySQL)
library(ggplot2)
t <- src_mysql(dbname="testing1", host="localhost", user="mysqluser", password="mysqlpass")
t1 <- t %<% tbl("t1")
t1 <- t %>% tbl("t1")
t1
mean(t1$id)
t1 %>% id
t1 %>% select("id")
t1 %>% select("id") %>% collect()
t1 %>% select(id) %>% collect()
t1 %>% select(id) %>% collect() %>% mean()
mean(t1 %>% select(id) %>% collect())
t1 %>% select(id) %>% collect()
# DAILY CLOSING PRICES NOV 1, 1993 TO APR 3, 2003
?plot
install.packages("VennDiagram")
library("VennDiagram", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
venn = venn.diagram(x=list(A=c(1:240),B=c(1:180),C=c(200:255)),fill=c("yellow","red","blue"),filename = NULL)
venn = venn.diagram(x=list(A=c(1:240),B=c(1:180),C=c(200:255)),fill=c("yellow","red","blue"),filename = NULL)
install.packages("curl")
install.packages("httr")
install.packages("rversions")
install.packages("devtools")
library(devtools)
library (ggmap)
library(ggmap)
myLocation = "Washington DC"
myMap <- get_map(location = myLocation,source = "google",maptype = "watercolor", crop = FALSE)
ggmap(myMap)
library(ggmap)
myLocation = "World"
myMap <- get_map(location = myLocation,source = "google",maptype = "watercolor", crop = FALSE)
ggmap(myMap)
library(ggmap)
world <- map_data("world")
worldmap <- ggplot(world, aes(x=long, y=lat, group=group)) +
geom_path() +
scale_y_continuous(breaks=(-2:2) * 30) +
scale_x_continuous(breaks=(-4:4) * 45)
#this works
worldmap + geom_point(aes(50, 30, colour="red"))
world <- map_data("world")
worldmap <- ggplot(world, aes(x=long, y=lat, group=group)) +
geom_path() +
scale_y_continuous(breaks=(-2:2) * 30) +
scale_x_continuous(breaks=(-4:4) * 45)
#this works
worldmap + geom_point(aes(50, 30, colour="red"))
library(ggmap)
library(rPython)
library(googleVis)
python.load( system.file( "A08_Part2.py",package = "rPython" ) )
world <- map_data("world")
worldmap <- ggplot(world, aes(x=long, y=lat, group=group)) +
geom_path() +
scale_y_continuous(breaks=(-2:2) * 30) +
scale_x_continuous(breaks=(-4:4) * 45)
#this works
worldmap + geom_point(aes(50, 30, colour="red"))
python.get( "d" )
#data(Exports)    # a simple data frame
#Geo <- gvisGeoMap(Exports, locationvar="Country", numvar="Profit", options=list(height=400, dataMode='regions'))
#plot(Geo)
library(ggmap)
library(rPython)
library(googleVis)
python.load( system.file( "A08_Part2.py",package = "rPython" ) )
world <- map_data("world")
worldmap <- ggplot(world, aes(x=long, y=lat, group=group)) +
geom_path() +
scale_y_continuous(breaks=(-2:2) * 30) +
scale_x_continuous(breaks=(-4:4) * 45)
#this works
worldmap + geom_point(aes(50, 30, colour="red"))
python.get( "a" )
print (a)
#data(Exports)    # a simple data frame
#Geo <- gvisGeoMap(Exports, locationvar="Country", numvar="Profit", options=list(height=400, dataMode='regions'))
#plot(Geo)
library(ggmap)
library(rPython)
#library(googleVis)
python.load( system.file( "A08_Part2.py",package = "rPython" ) )
world <- map_data("world")
worldmap <- ggplot(world, aes(x=long, y=lat, group=group)) +
geom_path() +
scale_y_continuous(breaks=(-2:2) * 30) +
scale_x_continuous(breaks=(-4:4) * 45)
#this works
worldmap + geom_point(aes(50, 30, colour="red"))
python.get( "a" )
print (a)
#data(Exports)    # a simple data frame
#Geo <- gvisGeoMap(Exports, locationvar="Country", numvar="Profit", options=list(height=400, dataMode='regions'))
#plot(Geo)
library(ggmap)
library(rPython)
#library(googleVis)
python.load( system.file( "A08_Part2.py",package = "rPython" ) )
world <- map_data("world")
worldmap <- ggplot(world, aes(x=long, y=lat, group=group)) +
geom_path() +
scale_y_continuous(breaks=(-2:2) * 30) +
scale_x_continuous(breaks=(-4:4) * 45)
#this works
worldmap + geom_point(aes(50, 30, colour="red"))
python.get("a")
print(a)
#data(Exports)    # a simple data frame
#Geo <- gvisGeoMap(Exports, locationvar="Country", numvar="Profit", options=list(height=400, dataMode='regions'))
#plot(Geo)
samples[[i]] = rnorm(n[i]*N,size = n[i],prob = p)
# Normal distribution
N = 100
u = 60
x = 15
n = c(2,5,10,25,50,100)
trials = length(n)
samples = list()
for(i in 1:trials){
samples[[i]] = rnorm(n[i]*N,size = n[i],mean = u, sd = x)
dim(samples[[i]]) = c(N,n[i])
}
samples[[1]]
# Normal distribution
N = 100
u = 60
x = 15
n = c(2,5,10,25,50,100)
trials = length(n)
samples = list()
for(i in 1:trials){
samples[[i]] = rnorm(n[i]*N,size = n[i],mean = u, sd = x)
dim(samples[[i]]) = c(N,n[i])
}
samples[[1]]
# Normal distribution
N = 100
u = 60
x = 15
n = c(2,5,10,25,50,100)
trials = length(n)
samples = list()
for(i in 1:trials){
samples[[i]] = rnorm(n[i]*N,size = n[i],mean = u, sd = x)
dim(samples[[i]]) = c(N,n[i])
}
samples[[1]]
# Normal distribution
N = 100
u = 60
x = 15
n = c(2,5,10,25,50,100)
trials = length(n)
samples = list()
for(i in 1:trials){
samples[[i]] = rnorm(n[i]*N,size = n[i],mean = u, sd = x)
dim(samples[[i]]) = c(N,n[i])
}
samples[[1]]
# Normal distribution
N = 100
u = 60
x = 15
n = c(2,5,10,25,50,100)
trials = length(n)
samples = list()
for(i in 1:trials){
samples[[i]] = rnorm(n[i]*N,mean = u, sd = x)
dim(samples[[i]]) = c(N,n[i])
}
samples[[1]]
samples[[2]]
samples[[1]]
samples[[2]]
samples[,,1]
samples[[][1]]
samples[[1]]
pnorm(0,4,2)
pnorm(0,4,2)
pnorm(0,0,10'')
pnorm(0,0,10)
pnorm(20,4,2)
pnorm(20,0z,10)
pnorm(20,0,10)
pnorm(0,4,sqrt(104))
pnorm(0,-4,sqrt(104))
pnorm(270,300,15)
0.1*0.9
sqrt(0.09)
pnorm(0.13,10,30)
pnorm(0.13,20,60)
pnorm(0.13,5,15)
0.3*5
pnorm(0.13,0.5,1.5)
pnorm(0.13,0.1,0.3)
pnorm(0.13,10,3)
sqrt(1000)
sqrt(10000)
pnorm(0.13,1000,30)
0.1*5
0.3*5
pnorm(0.13,0.5,1.5)
pnorm(0.13,0.1*n,0.3*sqrt(n))
n=1000
pnorm(0.13,0.1*n,0.3*sqrt(n))
n=10
pnorm(0.13,0.1*n,0.3*sqrt(n))
n=5
pnorm(0.13,0.1*n,0.3*sqrt(n))
n=2
pnorm(0.13,0.1*n,0.3*sqrt(n))
n=1
pnorm(0.13,0.1*n,0.3*sqrt(n))
# Central Limit Theorem Applications
# Normal distribution
N = 100
mu = 60
sigma = 15
n = c(2,5,10,25,50,100)
trials = length(n)
samples = list()
for(i in 1:trials){
samples[[i]] = rnorm(n[i]*N,mean = mu, sd = sigma)
dim(samples[[i]]) = c(N,n[i])
}
mean.norms = mat.or.vec(N,trials)
std.norms = mat.or.vec(N,trials)
p = mat.or.vec(N,trials)
q = mat.or.vec(N,trials)
r = mat.or.vec(N,trials)
for(i in 1:trials){
mean.norms[,i] = rowMeans(samples[[i]])
std.norms[,i] = apply(samples[[i]],1,sd)
p[,i] = (mean.norms[,i]-mu)/(sigma/sqrt(n[i]))
q[,i] = (mean.norms[,i]-mu)/(std.norms[,i]/sqrt(n[i]))
r[,i] = ((n[i]-1)*(std.norms[,i]^2))/(sigma^2)
title = paste("Distribution of P for n = ",n[i])
hist(p[,i], main = title,probability=TRUE,nclass=15,col="blue")
title = paste("Distribution of Q for n = ",n[i])
hist(q[,i], main = title,probability=TRUE,nclass=15,col="green")
title = paste("Distribution of R for n = ",n[i])
hist(r[,i], main = title,probability=TRUE,nclass=15,col="red")
}
View(q)
setwd("~/Programming for Analytics/IndividualProject")
setwd("~/Programming for Analytics/IndividualProject")
library(shiny)
library(rworldmap)
library(plyr)
maleDf <- read.csv('male.csv', header=TRUE)
femaleDf <- read.csv('female.csv', header=TRUE)
allCountries = unique(maleDf$Country)
allCountries <- data.matrix(allCountries)
newrow = c("All")
allCountries = rbind(newrow,allCountries)
yearSub = femaleDf[order(femaleDf$Year),]
yearSub = unique(yearSub$Year)
year <- data.matrix(yearSub)
maleSub = aggregate(Count ~ Year, maleDf, sum)
maleSub <- subset(maleSub, select = Count)
maleSub = maleSub/1000000
maleSub <- data.matrix(maleSub)
femaleSub = aggregate(Count ~ Year, femaleDf, sum)
femaleSub <- subset(femaleSub, select = Count)
femaleSub = femaleSub/1000000
femaleSub <- data.matrix(femaleSub)
server <- function(input, output) {
output$MaleMap <- renderPlot({
#hist(rnorm(input$obs), col = 'darkgray', border = 'white')
maleSubMap <- maleDf[maleDf$Year == input$yr, ]
maleSubMap = aggregate(Count ~ Country, maleSubMap, sum)
#create a map-shaped window
#mapDevice('x11')
#join to a coarse resolution map
spdf <- joinCountryData2Map(maleSubMap, joinCode="NAME", nameJoinColumn="Country")
mapCountryData(spdf, nameColumnToPlot="Count", catMethod="fixedWidth", mapTitle="Total Male Children Out of School")
})
output$FemaleMap <- renderPlot({
#hist(rnorm(input$obs), col = 'darkgray', border = 'white')
femaleSubMap <- femaleDf[femaleDf$Year == input$yr, ]
femaleSubMap = aggregate(Count ~ Country, femaleSubMap, sum)
#create a map-shaped window
#mapDevice('x11')
#join to a coarse resolution map
spdf2 <- joinCountryData2Map(femaleSubMap, joinCode="NAME", nameJoinColumn="Country")
mapCountryData(spdf2, nameColumnToPlot="Count", catMethod="fixedWidth", mapTitle="Total Female Children Out of School")
})
datasetInput <- reactive({
maleSubT <- maleDf[maleDf$Year == input$yr, ]
femaleSubT <- femaleDf[femaleDf$Year == input$yr, ]
bothT = merge(maleSubT, femaleSubT, by.x = "Country", by.y = "Country")
bothT <- bothT[order(-(bothT$Count.x+bothT$Count.y)),]
bothT <- bothT[1:10,]
bothT <- subset(bothT, select = (c("Country","Count.x","Count.y")))
names(bothT)[2] <- "Counts (Male)"
names(bothT)[3] <- "Counts (Female)"
return(bothT)
})
output$Table = renderTable({
datasetInput()
},include.rownames=FALSE)
output$MalePlot <- renderPlot({
if(input$ctry == "All")
{
plot(year, maleSub, type="o", col="red", ylab="Count (Millions)", xlab="Year")
title(main='Total Male Children Out of School 2000-2015')
mtext("All Countries")
}
else
{
maleSubCtry <- maleDf[maleDf$Country == input$ctry, ]
maleSubCtry = aggregate(Count ~ Year, maleSubCtry, sum)
maleSubCtry <- subset(maleSubCtry, select = Count)
maleSubCtry = maleSubCtry/1000
maleSubCtry <- data.matrix(maleSubCtry)
plot(year, maleSubCtry, type="o", col="red", ylab="Count (Thousands)", xlab="Year")
title(main='Total Male Children Out of School 2000-2015')
mtext(input$ctry)
}
})
output$FemalePlot <- renderPlot({
if(input$ctry == "All")
{
plot(year, femaleSub, type="o", col="red", ylab="Count (Millions)", xlab="Year")
title(main='Total Female Children Out of School 2000-2015')
mtext("All Countries")
}
else
{
femaleSubCtry <- femaleDf[femaleDf$Country == input$ctry, ]
femaleSubCtry = aggregate(Count ~ Year, femaleSubCtry, sum)
femaleSubCtry <- subset(femaleSubCtry, select = Count)
femaleSubCtry = femaleSubCtry/1000
femaleSubCtry <- data.matrix(femaleSubCtry)
plot(year, femaleSubCtry, type="o", col="red", ylab="Count (Thousands)", xlab="Year")
title(main='Total Female Children Out of School 2000-2015')
mtext(input$ctry)
}
})
}
ui <- shinyUI(fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("yr", "Year", min = 2000, max = 2015, value = 1),
selectInput("ctry", "Country", allCountries, selected = "All", multiple = FALSE, selectize = TRUE, width = NULL, size = NULL)
),
mainPanel(
tableOutput("Table"),
plotOutput("MaleMap"),
plotOutput("FemaleMap"),
plotOutput("MalePlot", height="400px"),
plotOutput("FemalePlot", height="400px")
)
)))
shinyApp(ui = ui, server = server)
